package main

import (
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/urfave/cli/v2"
)

// Model represents the Bubble Tea model
type Model struct {
	TotalRequests int
	BatchSize     int
	Completed     int
}

// Init initializes the Bubble Tea model
func (m Model) Init() tea.Cmd {
	return nil
}

// UpdateProgress is a message to update the progress
type UpdateProgress struct {
	Count int
}

// Update handles messages and updates the model
func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case UpdateProgress:
		m.Completed += msg.Count // Update the completed count
	}
	return m, nil
}

// View renders the progress bar
func (m Model) View() string {
	percentage := float64(m.Completed) / float64(m.TotalRequests) * 100
	barLength := 50
	filled := int(percentage / 100 * float64(barLength))
	bar := "[" + repeat('#', filled) + repeat('-', barLength-filled) + "]"
	return fmt.Sprintf("Progress: %s %.2f%%\n", bar, percentage)
}

// repeat creates a string with n copies of the character c
func repeat(c rune, n int) string {
	return string(make([]rune, n, n))
}

// SendPostRequests sets up the CLI application and starts the request process
func SendPostRequests() *cli.App {
	appInst := &cli.App{
		Name:                 "gowebtest",
		Version:              "0.0.1",
		Compiled:             time.Now(),
		Args:                 true,
		EnableBashCompletion: true,
		Authors: []*cli.Author{
			{
				Name:  "Justin Trahan",
				Email: "justin@trahan.dev",
			},
		},
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:    "requests",
				Aliases: []string{"n"},
				Usage:   "The Total Number of requests to send.",
			},
			&cli.IntFlag{
				Name:    "batch-size",
				Aliases: []string{"b"},
				Value:   75,
				Usage:   "Batch size, number of requests to send at a time.",
			},
		},
		Action: func(cCtx *cli.Context) error {
			var totalRequests, batchSize int

			// Check if the flags are set, otherwise use positional arguments
			if cCtx.IsSet("requests") {
				totalRequests = cCtx.Int("requests")
			} else if cCtx.Args().Len() > 0 {
				arg0, err := strconv.Atoi(cCtx.Args().Get(0))
				if err != nil {
					return cli.Exit("Invalid value for total requests. Expected an integer.", 1)
				}
				totalRequests = arg0
			}

			if cCtx.IsSet("batch-size") {
				batchSize = cCtx.Int("batch-size")
			} else if cCtx.Args().Len() > 1 {
				arg1, err := strconv.Atoi(cCtx.Args().Get(1))
				if err != nil {
					return cli.Exit("Invalid value for batch size. Expected an integer.", 1)
				}
				batchSize = arg1
			}

			if totalRequests == 0 || batchSize == 0 {
				return cli.Exit("Please provide valid values for total requests and batch size.", 1)
			}

			// Initialize the Bubble Tea program
			model := Model{TotalRequests: totalRequests, BatchSize: batchSize}
			p := tea.NewProgram(model)

			// Start sending requests concurrently
			go sendConcurrentRequests(totalRequests, batchSize, p)

			// Run the Bubble Tea program
			if err := p.Start(); err != nil {
				log.Fatal(err)
			}

			return nil
		},
	}
	return appInst
}

// sendConcurrentRequests breaks requests into batches and sends them
func sendConcurrentRequests(totalRequests int, batchSize int, p *tea.Program) {
	var wg sync.WaitGroup
	numBatches := (totalRequests + batchSize - 1) / batchSize // Calculate number of batches

	for batch := 0; batch < numBatches; batch++ {
		wg.Add(1)
		startID := batch * batchSize
		requestsInBatch := min(batchSize, totalRequests-startID)

		go func(requestsInBatch int) {
			defer wg.Done()
			sendBatch(startID, requestsInBatch, p)
		}(requestsInBatch)

		wg.Wait() // Wait for the current batch to finish before starting the next
	}
	wg.Wait() // Ensure all batches are completed
}

// sendBatch sends a batch of requests with the specified number of concurrent requests
func sendBatch(startID, numRequests int, p *tea.Program) {
	client := &http.Client{
		Timeout: 30 * time.Second, // Increased timeout for slower responses
	}

	var batchWG sync.WaitGroup
	for i := 0; i < numRequests; i++ {
		batchWG.Add(1)
		go func(id int) {
			defer batchWG.Done()
			sendRequest(client, startID+id)

			// Update completed requests in the model
			p.Send(UpdateProgress{Count: 1}) // Send an update message to trigger the view to refresh
		}(i)
	}
	batchWG.Wait()
}

// sendRequest sends a single GET request with random parameters
func sendRequest(client *http.Client, id int) {
	// Generate random values for parameters
	initAmount := randomInt(500, 100000)
	monthlyContribution := randomInt(50, 5000)
	interestRate := fmt.Sprintf("%.2f", randomFloat(0.1, 200))
	numberOfYears := randomInt(1, 50)

	// Build the request URL
	url := fmt.Sprintf("https://calc.test.trahan.dev/calculated?initAmount=%d&monthlyContribution=%d&interestRate=%s&numberOfYears=%d",
		initAmount, monthlyContribution, interestRate, numberOfYears)

	// Create the request
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Printf("Error creating request %d: %v", id, err)
		return
	}

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Error in request %d: %v", id, err)
		return
	}
	defer resp.Body.Close()
}

// randomFloat generates a random float between min and max
func randomFloat(min, max float64) float64 {
	return min + rand.Float64()*(max-min)
}

// randomInt generates a random integer between min and max
func randomInt(min, max int) int {
	return rand.Intn(max-min+1) + min
}

// min function to get the minimum value
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	app := SendPostRequests()
	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}
